{"version":3,"sources":["vs/vs/loader.js"],"names":["_amdLoaderGlobal","this","AMDLoader","global","Environment","opts","isWindows","isNode","isElectronRenderer","isWebWorker","detect","_isWindows","module","exports","process","versions","electron","type","importScripts","navigator","userAgent","indexOf","platform","LoaderEventType","LoaderEvent","detail","timestamp","LoaderEventRecorder","loaderAvailableTimestamp","_events","LoaderAvailable","prototype","record","push","Utilities","getHighPerformanceTimestamp","getEvents","NullLoaderEventRecorder","INSTANCE","fileUriToFilePath","uri","decodeURI","test","substr","startsWith","haystack","needle","length","endsWith","containsQueryString","url","isAbsolutePath","forEachProperty","obj","callback","key","hasOwnProperty","isEmpty","recursiveClone","result","Array","isArray","value","generateAnonymousModule","NEXT_ANONYMOUS_ID","isAnonymousModule","id","PERFORMANCE_NOW_PROBED","HAS_PERFORMANCE_NOW","performance","now","Date","ConfigurationOptionsUtil","validateConfigurationOptions","options","baseUrl","isBuild","paths","config","catchError","urlArgs","onError","err","errorCode","console","error","moduleId","stack","neededBy","ignoreDuplicateModules","nodeModules","nodeCachedDataWriteDelay","onNodeCachedData","data","warn","path","mergeConfigurationOptions","overwrite","base","concat","key2","value2","Configuration","env","_env","_createIgnoreDuplicateModulesMap","_createNodeModulesMap","_createSortedPathsRules","nodeRequire","main","filename","nodeMain","dirnameIndex","Math","max","lastIndexOf","substring","ignoreDuplicateModulesMap","i","nodeModulesMap","Object","create","_i","_a","nodeModule","_this","sortedPathsRules","from","to","sort","a","b","cloneAndMerge","getOptionsLiteral","_applyPaths","pathRule","len","j","lenJ","_addUrlArgsToUrl","_addUrlArgsIfNecessaryToUrl","_addUrlArgsIfNecessaryToUrls","urls","moduleIdToPaths","results","requireToUrl","isDuplicateMessageIgnoredFor","getConfigForModule","shouldCatchError","shouldRecordStats","recordStats","OnlyOnceScriptLoader","actualScriptLoader","callbackMap","load","moduleManager","scriptSrc","errorback","scriptCallbacks","triggerCallback","triggerErrorback","BrowserScriptLoader","attachListeners","script","unbind","removeEventListener","loadEventListener","errorEventListener","e","addEventListener","document","createElement","setAttribute","getElementsByTagName","appendChild","WorkerScriptLoader","NodeScriptLoader","_didInitialize","_didPatchNodeRequire","_init","_fs","_vm","_path","_crypto","_jsflags","argv","arg","_initNodeRequire","makeRequireFunction","mod","Module","constructor","require","resolve","request","_resolveFilename","mainModule","extensions","_extensions","cache","_cache","nodeCachedDataDir","getConfig","that","_compile","content","replace","wrapper","wrap","cachedDataPath","_getCachedDataPath","cachedData","readFileSync","produceCachedData","Script","compileWrapper","runInThisContext","dirname","args","Buffer","apply","_processCachedData","nodeInstrumenter","c","recorder","getRecorder","pieces","split","moduleExports_1","enqueueDefineAnonymousModule","readFile","encoding","normalizedScriptSrc","normalize","vmScriptSrc","driveLetterMatch","match","toUpperCase","contents","prefix","charCodeAt","_BOM","cachedDataPath_1","_loadAndEvalScript","NodeBeginEvaluatingScript","call","getGlobalAMDRequireFunc","getGlobalAMDDefineFunc","NodeEndEvaluatingScript","basedir","hash","createHash","update","digest","basename","join","cachedDataRejected","_runSoon","unlink","cachedDataProduced","undefined","writeFile","minTimeout","timeout","ceil","random","setTimeout","createScriptLoader","ModuleIdResolver","fromModuleId","lastSlash","fromModulePath","_normalizeModuleId","pattern","r","resolveModule","ROOT","strId","dependencies","moduleIdResolver","_callback","_errorback","exportsPassedIn","unresolvedDependenciesCount","_isComplete","_safeInvokeFunction","returnedValue","producedError","_invokeFactory","strModuleId","dependenciesValues","complete","BeginInvokeFactory","EndInvokeFactory","onDependencyError","isComplete","ModuleIdProvider","_nextId","_strModuleIdToIntModuleId","Map","_intModuleIdToStrModuleId","getModuleId","getMaxModuleId","get","set","getStrModuleId","RegularDependency","EXPORTS","MODULE","REQUIRE","PluginDependency","pluginId","pluginParam","ModuleManager","scriptLoader","defineFunc","requireFunc","_scriptLoader","_loaderAvailableTimestamp","_defineFunc","_requireFunc","_moduleIdProvider","_config","_modules2","_knownModules2","_inverseDependencies2","_inversePluginDependencies2","_currentAnnonymousDefineCall","_recorder","_buildInfoPath","_buildInfoDefineStack","_buildInfoDependencies","reset","_findRelevantLocationInStack","str","normalizedPath","stackPieces","m","stackPath","stackLine","stackColumn","trimPathOffset","line","parseInt","col","Error","getBuildInfo","resultLen","location_1","defineStack","defineLocation","shim","getLoaderEvents","defineModule","_normalizeDependencies","map","dep","_resolve","_normalizeDependency","dependency","bangIndex","strPluginId","dependencyId","_relativeRequire","synchronousRequire","_strModuleId","configure","params","shouldOverwrite","oldShouldRecordStats","_onLoad","defineCall","_createLoadError","intModuleId","_onLoadError","seenModuleId","someoneNotified","queue","queueElement","shift","inverseDeps","inverseDep","_hasDependencyPath","fromId","toId","inQueue","dependencyModule","_findCyclePath","depth","_createRequire","toUrl","getStats","__$__nodeRequire","_loadModule","lastPathIndex","loadNextPath","currentPath_1","recorder_1","BeginLoadingScript","EndLoadingScriptOK","EndLoadingScriptError","_loadPluginDependency","plugin","pluginDependency","cyclePath","reverse","inversePluginDeps","_onModuleComplete","inverseDependencyId","inverseDependency","delete","define","createGlobalAMDFuncs","DefineFunc","amd","jQuery","_requireFunc_config","RequireFunc","arguments","init","_nodeRequire","what","NodeBeginNativeRequire","NodeEndNativeRequire","doNotInitLoader"],"mappings":"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","file":"loader.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *--------------------------------------------------------------------------------------------*/\nvar _amdLoaderGlobal = this;\nvar AMDLoader;\n(function (AMDLoader) {\n    AMDLoader.global = _amdLoaderGlobal;\n    var Environment = (function () {\n        function Environment(opts) {\n            this.isWindows = opts.isWindows;\n            this.isNode = opts.isNode;\n            this.isElectronRenderer = opts.isElectronRenderer;\n            this.isWebWorker = opts.isWebWorker;\n        }\n        Environment.detect = function () {\n            return new Environment({\n                isWindows: this._isWindows(),\n                isNode: (typeof module !== 'undefined' && !!module.exports),\n                isElectronRenderer: (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.electron !== 'undefined' && process.type === 'renderer'),\n                isWebWorker: (typeof AMDLoader.global.importScripts === 'function')\n            });\n        };\n        Environment._isWindows = function () {\n            if (typeof navigator !== 'undefined') {\n                if (navigator.userAgent && navigator.userAgent.indexOf('Windows') >= 0) {\n                    return true;\n                }\n            }\n            if (typeof process !== 'undefined') {\n                return (process.platform === 'win32');\n            }\n            return false;\n        };\n        return Environment;\n    }());\n    AMDLoader.Environment = Environment;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var LoaderEventType;\n    (function (LoaderEventType) {\n        LoaderEventType[LoaderEventType[\"LoaderAvailable\"] = 1] = \"LoaderAvailable\";\n        LoaderEventType[LoaderEventType[\"BeginLoadingScript\"] = 10] = \"BeginLoadingScript\";\n        LoaderEventType[LoaderEventType[\"EndLoadingScriptOK\"] = 11] = \"EndLoadingScriptOK\";\n        LoaderEventType[LoaderEventType[\"EndLoadingScriptError\"] = 12] = \"EndLoadingScriptError\";\n        LoaderEventType[LoaderEventType[\"BeginInvokeFactory\"] = 21] = \"BeginInvokeFactory\";\n        LoaderEventType[LoaderEventType[\"EndInvokeFactory\"] = 22] = \"EndInvokeFactory\";\n        LoaderEventType[LoaderEventType[\"NodeBeginEvaluatingScript\"] = 31] = \"NodeBeginEvaluatingScript\";\n        LoaderEventType[LoaderEventType[\"NodeEndEvaluatingScript\"] = 32] = \"NodeEndEvaluatingScript\";\n        LoaderEventType[LoaderEventType[\"NodeBeginNativeRequire\"] = 33] = \"NodeBeginNativeRequire\";\n        LoaderEventType[LoaderEventType[\"NodeEndNativeRequire\"] = 34] = \"NodeEndNativeRequire\";\n    })(LoaderEventType = AMDLoader.LoaderEventType || (AMDLoader.LoaderEventType = {}));\n    var LoaderEvent = (function () {\n        function LoaderEvent(type, detail, timestamp) {\n            this.type = type;\n            this.detail = detail;\n            this.timestamp = timestamp;\n        }\n        return LoaderEvent;\n    }());\n    AMDLoader.LoaderEvent = LoaderEvent;\n    var LoaderEventRecorder = (function () {\n        function LoaderEventRecorder(loaderAvailableTimestamp) {\n            this._events = [new LoaderEvent(LoaderEventType.LoaderAvailable, '', loaderAvailableTimestamp)];\n        }\n        LoaderEventRecorder.prototype.record = function (type, detail) {\n            this._events.push(new LoaderEvent(type, detail, AMDLoader.Utilities.getHighPerformanceTimestamp()));\n        };\n        LoaderEventRecorder.prototype.getEvents = function () {\n            return this._events;\n        };\n        return LoaderEventRecorder;\n    }());\n    AMDLoader.LoaderEventRecorder = LoaderEventRecorder;\n    var NullLoaderEventRecorder = (function () {\n        function NullLoaderEventRecorder() {\n        }\n        NullLoaderEventRecorder.prototype.record = function (type, detail) {\n            // Nothing to do\n        };\n        NullLoaderEventRecorder.prototype.getEvents = function () {\n            return [];\n        };\n        return NullLoaderEventRecorder;\n    }());\n    NullLoaderEventRecorder.INSTANCE = new NullLoaderEventRecorder();\n    AMDLoader.NullLoaderEventRecorder = NullLoaderEventRecorder;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var Utilities = (function () {\n        function Utilities() {\n        }\n        /**\n         * This method does not take care of / vs \\\n         */\n        Utilities.fileUriToFilePath = function (isWindows, uri) {\n            uri = decodeURI(uri);\n            if (isWindows) {\n                if (/^file:\\/\\/\\//.test(uri)) {\n                    // This is a URI without a hostname => return only the path segment\n                    return uri.substr(8);\n                }\n                if (/^file:\\/\\//.test(uri)) {\n                    return uri.substr(5);\n                }\n            }\n            else {\n                if (/^file:\\/\\//.test(uri)) {\n                    return uri.substr(7);\n                }\n            }\n            // Not sure...\n            return uri;\n        };\n        Utilities.startsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;\n        };\n        Utilities.endsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(haystack.length - needle.length) === needle;\n        };\n        // only check for \"?\" before \"#\" to ensure that there is a real Query-String\n        Utilities.containsQueryString = function (url) {\n            return /^[^\\#]*\\?/gi.test(url);\n        };\n        /**\n         * Does `url` start with http:// or https:// or file:// or / ?\n         */\n        Utilities.isAbsolutePath = function (url) {\n            return /^((http:\\/\\/)|(https:\\/\\/)|(file:\\/\\/)|(\\/))/.test(url);\n        };\n        Utilities.forEachProperty = function (obj, callback) {\n            if (obj) {\n                var key = void 0;\n                for (key in obj) {\n                    if (obj.hasOwnProperty(key)) {\n                        callback(key, obj[key]);\n                    }\n                }\n            }\n        };\n        Utilities.isEmpty = function (obj) {\n            var isEmpty = true;\n            Utilities.forEachProperty(obj, function () {\n                isEmpty = false;\n            });\n            return isEmpty;\n        };\n        Utilities.recursiveClone = function (obj) {\n            if (!obj || typeof obj !== 'object') {\n                return obj;\n            }\n            var result = Array.isArray(obj) ? [] : {};\n            Utilities.forEachProperty(obj, function (key, value) {\n                if (value && typeof value === 'object') {\n                    result[key] = Utilities.recursiveClone(value);\n                }\n                else {\n                    result[key] = value;\n                }\n            });\n            return result;\n        };\n        Utilities.generateAnonymousModule = function () {\n            return '===anonymous' + (Utilities.NEXT_ANONYMOUS_ID++) + '===';\n        };\n        Utilities.isAnonymousModule = function (id) {\n            return /^===anonymous/.test(id);\n        };\n        Utilities.getHighPerformanceTimestamp = function () {\n            if (!this.PERFORMANCE_NOW_PROBED) {\n                this.PERFORMANCE_NOW_PROBED = true;\n                this.HAS_PERFORMANCE_NOW = (AMDLoader.global.performance && typeof AMDLoader.global.performance.now === 'function');\n            }\n            return (this.HAS_PERFORMANCE_NOW ? AMDLoader.global.performance.now() : Date.now());\n        };\n        return Utilities;\n    }());\n    Utilities.NEXT_ANONYMOUS_ID = 1;\n    Utilities.PERFORMANCE_NOW_PROBED = false;\n    Utilities.HAS_PERFORMANCE_NOW = false;\n    AMDLoader.Utilities = Utilities;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var ConfigurationOptionsUtil = (function () {\n        function ConfigurationOptionsUtil() {\n        }\n        /**\n         * Ensure configuration options make sense\n         */\n        ConfigurationOptionsUtil.validateConfigurationOptions = function (isWebWorker, options) {\n            function defaultOnError(err) {\n                if (err.errorCode === 'load') {\n                    console.error('Loading \"' + err.moduleId + '\" failed');\n                    console.error('Detail: ', err.detail);\n                    if (err.detail && err.detail.stack) {\n                        console.error(err.detail.stack);\n                    }\n                    console.error('Here are the modules that depend on it:');\n                    console.error(err.neededBy);\n                    return;\n                }\n                if (err.errorCode === 'factory') {\n                    console.error('The factory method of \"' + err.moduleId + '\" has thrown an exception');\n                    console.error(err.detail);\n                    if (err.detail && err.detail.stack) {\n                        console.error(err.detail.stack);\n                    }\n                    return;\n                }\n            }\n            options = options || {};\n            if (typeof options.baseUrl !== 'string') {\n                options.baseUrl = '';\n            }\n            if (typeof options.isBuild !== 'boolean') {\n                options.isBuild = false;\n            }\n            if (typeof options.paths !== 'object') {\n                options.paths = {};\n            }\n            if (typeof options.config !== 'object') {\n                options.config = {};\n            }\n            if (typeof options.catchError === 'undefined') {\n                // Catch errors by default in web workers, do not catch errors by default in other contexts\n                options.catchError = isWebWorker;\n            }\n            if (typeof options.urlArgs !== 'string') {\n                options.urlArgs = '';\n            }\n            if (typeof options.onError !== 'function') {\n                options.onError = defaultOnError;\n            }\n            if (typeof options.ignoreDuplicateModules !== 'object' || !Array.isArray(options.ignoreDuplicateModules)) {\n                options.ignoreDuplicateModules = [];\n            }\n            if (options.baseUrl.length > 0) {\n                if (!AMDLoader.Utilities.endsWith(options.baseUrl, '/')) {\n                    options.baseUrl += '/';\n                }\n            }\n            if (!Array.isArray(options.nodeModules)) {\n                options.nodeModules = [];\n            }\n            if (typeof options.nodeCachedDataWriteDelay !== 'number' || options.nodeCachedDataWriteDelay < 0) {\n                options.nodeCachedDataWriteDelay = 1000 * 7;\n            }\n            if (typeof options.onNodeCachedData !== 'function') {\n                options.onNodeCachedData = function (err, data) {\n                    if (!err) {\n                        // ignore\n                    }\n                    else if (err.errorCode === 'cachedDataRejected') {\n                        console.warn('Rejected cached data from file: ' + err.path);\n                    }\n                    else if (err.errorCode === 'unlink' || err.errorCode === 'writeFile') {\n                        console.error('Problems writing cached data file: ' + err.path);\n                        console.error(err.detail);\n                    }\n                    else {\n                        console.error(err);\n                    }\n                };\n            }\n            return options;\n        };\n        ConfigurationOptionsUtil.mergeConfigurationOptions = function (isWebWorker, overwrite, base) {\n            if (overwrite === void 0) { overwrite = null; }\n            if (base === void 0) { base = null; }\n            var result = AMDLoader.Utilities.recursiveClone(base || {});\n            // Merge known properties and overwrite the unknown ones\n            AMDLoader.Utilities.forEachProperty(overwrite, function (key, value) {\n                if (key === 'ignoreDuplicateModules' && typeof result.ignoreDuplicateModules !== 'undefined') {\n                    result.ignoreDuplicateModules = result.ignoreDuplicateModules.concat(value);\n                }\n                else if (key === 'paths' && typeof result.paths !== 'undefined') {\n                    AMDLoader.Utilities.forEachProperty(value, function (key2, value2) { return result.paths[key2] = value2; });\n                }\n                else if (key === 'config' && typeof result.config !== 'undefined') {\n                    AMDLoader.Utilities.forEachProperty(value, function (key2, value2) { return result.config[key2] = value2; });\n                }\n                else {\n                    result[key] = AMDLoader.Utilities.recursiveClone(value);\n                }\n            });\n            return ConfigurationOptionsUtil.validateConfigurationOptions(isWebWorker, result);\n        };\n        return ConfigurationOptionsUtil;\n    }());\n    AMDLoader.ConfigurationOptionsUtil = ConfigurationOptionsUtil;\n    var Configuration = (function () {\n        function Configuration(env, options) {\n            this._env = env;\n            this.options = ConfigurationOptionsUtil.mergeConfigurationOptions(this._env.isWebWorker, options);\n            this._createIgnoreDuplicateModulesMap();\n            this._createNodeModulesMap();\n            this._createSortedPathsRules();\n            if (this.options.baseUrl === '') {\n                if (this._env.isNode && this.options.nodeRequire && this.options.nodeRequire.main && this.options.nodeRequire.main.filename) {\n                    var nodeMain = this.options.nodeRequire.main.filename;\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\n                }\n                if (this._env.isNode && this.options.nodeMain) {\n                    var nodeMain = this.options.nodeMain;\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\n                }\n            }\n        }\n        Configuration.prototype._createIgnoreDuplicateModulesMap = function () {\n            // Build a map out of the ignoreDuplicateModules array\n            this.ignoreDuplicateModulesMap = {};\n            for (var i = 0; i < this.options.ignoreDuplicateModules.length; i++) {\n                this.ignoreDuplicateModulesMap[this.options.ignoreDuplicateModules[i]] = true;\n            }\n        };\n        Configuration.prototype._createNodeModulesMap = function () {\n            // Build a map out of nodeModules array\n            this.nodeModulesMap = Object.create(null);\n            for (var _i = 0, _a = this.options.nodeModules; _i < _a.length; _i++) {\n                var nodeModule = _a[_i];\n                this.nodeModulesMap[nodeModule] = true;\n            }\n        };\n        Configuration.prototype._createSortedPathsRules = function () {\n            var _this = this;\n            // Create an array our of the paths rules, sorted descending by length to\n            // result in a more specific -> less specific order\n            this.sortedPathsRules = [];\n            AMDLoader.Utilities.forEachProperty(this.options.paths, function (from, to) {\n                if (!Array.isArray(to)) {\n                    _this.sortedPathsRules.push({\n                        from: from,\n                        to: [to]\n                    });\n                }\n                else {\n                    _this.sortedPathsRules.push({\n                        from: from,\n                        to: to\n                    });\n                }\n            });\n            this.sortedPathsRules.sort(function (a, b) {\n                return b.from.length - a.from.length;\n            });\n        };\n        /**\n         * Clone current configuration and overwrite options selectively.\n         * @param options The selective options to overwrite with.\n         * @result A new configuration\n         */\n        Configuration.prototype.cloneAndMerge = function (options) {\n            return new Configuration(this._env, ConfigurationOptionsUtil.mergeConfigurationOptions(this._env.isWebWorker, options, this.options));\n        };\n        /**\n         * Get current options bag. Useful for passing it forward to plugins.\n         */\n        Configuration.prototype.getOptionsLiteral = function () {\n            return this.options;\n        };\n        Configuration.prototype._applyPaths = function (moduleId) {\n            var pathRule;\n            for (var i = 0, len = this.sortedPathsRules.length; i < len; i++) {\n                pathRule = this.sortedPathsRules[i];\n                if (AMDLoader.Utilities.startsWith(moduleId, pathRule.from)) {\n                    var result = [];\n                    for (var j = 0, lenJ = pathRule.to.length; j < lenJ; j++) {\n                        result.push(pathRule.to[j] + moduleId.substr(pathRule.from.length));\n                    }\n                    return result;\n                }\n            }\n            return [moduleId];\n        };\n        Configuration.prototype._addUrlArgsToUrl = function (url) {\n            if (AMDLoader.Utilities.containsQueryString(url)) {\n                return url + '&' + this.options.urlArgs;\n            }\n            else {\n                return url + '?' + this.options.urlArgs;\n            }\n        };\n        Configuration.prototype._addUrlArgsIfNecessaryToUrl = function (url) {\n            if (this.options.urlArgs) {\n                return this._addUrlArgsToUrl(url);\n            }\n            return url;\n        };\n        Configuration.prototype._addUrlArgsIfNecessaryToUrls = function (urls) {\n            if (this.options.urlArgs) {\n                for (var i = 0, len = urls.length; i < len; i++) {\n                    urls[i] = this._addUrlArgsToUrl(urls[i]);\n                }\n            }\n            return urls;\n        };\n        /**\n         * Transform a module id to a location. Appends .js to module ids\n         */\n        Configuration.prototype.moduleIdToPaths = function (moduleId) {\n            if (this.nodeModulesMap[moduleId] === true) {\n                // This is a node module...\n                if (this.isBuild()) {\n                    // ...and we are at build time, drop it\n                    return ['empty:'];\n                }\n                else {\n                    // ...and at runtime we create a `shortcut`-path\n                    return ['node|' + moduleId];\n                }\n            }\n            var result = moduleId;\n            var results;\n            if (!AMDLoader.Utilities.endsWith(result, '.js') && !AMDLoader.Utilities.isAbsolutePath(result)) {\n                results = this._applyPaths(result);\n                for (var i = 0, len = results.length; i < len; i++) {\n                    if (this.isBuild() && results[i] === 'empty:') {\n                        continue;\n                    }\n                    if (!AMDLoader.Utilities.isAbsolutePath(results[i])) {\n                        results[i] = this.options.baseUrl + results[i];\n                    }\n                    if (!AMDLoader.Utilities.endsWith(results[i], '.js') && !AMDLoader.Utilities.containsQueryString(results[i])) {\n                        results[i] = results[i] + '.js';\n                    }\n                }\n            }\n            else {\n                if (!AMDLoader.Utilities.endsWith(result, '.js') && !AMDLoader.Utilities.containsQueryString(result)) {\n                    result = result + '.js';\n                }\n                results = [result];\n            }\n            return this._addUrlArgsIfNecessaryToUrls(results);\n        };\n        /**\n         * Transform a module id or url to a location.\n         */\n        Configuration.prototype.requireToUrl = function (url) {\n            var result = url;\n            if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                result = this._applyPaths(result)[0];\n                if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                    result = this.options.baseUrl + result;\n                }\n            }\n            return this._addUrlArgsIfNecessaryToUrl(result);\n        };\n        /**\n         * Flag to indicate if current execution is as part of a build.\n         */\n        Configuration.prototype.isBuild = function () {\n            return this.options.isBuild;\n        };\n        /**\n         * Test if module `moduleId` is expected to be defined multiple times\n         */\n        Configuration.prototype.isDuplicateMessageIgnoredFor = function (moduleId) {\n            return this.ignoreDuplicateModulesMap.hasOwnProperty(moduleId);\n        };\n        /**\n         * Get the configuration settings for the provided module id\n         */\n        Configuration.prototype.getConfigForModule = function (moduleId) {\n            if (this.options.config) {\n                return this.options.config[moduleId];\n            }\n        };\n        /**\n         * Should errors be caught when executing module factories?\n         */\n        Configuration.prototype.shouldCatchError = function () {\n            return this.options.catchError;\n        };\n        /**\n         * Should statistics be recorded?\n         */\n        Configuration.prototype.shouldRecordStats = function () {\n            return this.options.recordStats;\n        };\n        /**\n         * Forward an error to the error handler.\n         */\n        Configuration.prototype.onError = function (err) {\n            this.options.onError(err);\n        };\n        return Configuration;\n    }());\n    AMDLoader.Configuration = Configuration;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    /**\n     * Load `scriptSrc` only once (avoid multiple <script> tags)\n     */\n    var OnlyOnceScriptLoader = (function () {\n        function OnlyOnceScriptLoader(actualScriptLoader) {\n            this.actualScriptLoader = actualScriptLoader;\n            this.callbackMap = {};\n        }\n        OnlyOnceScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var _this = this;\n            var scriptCallbacks = {\n                callback: callback,\n                errorback: errorback\n            };\n            if (this.callbackMap.hasOwnProperty(scriptSrc)) {\n                this.callbackMap[scriptSrc].push(scriptCallbacks);\n                return;\n            }\n            this.callbackMap[scriptSrc] = [scriptCallbacks];\n            this.actualScriptLoader.load(moduleManager, scriptSrc, function () { return _this.triggerCallback(scriptSrc); }, function (err) { return _this.triggerErrorback(scriptSrc, err); });\n        };\n        OnlyOnceScriptLoader.prototype.triggerCallback = function (scriptSrc) {\n            var scriptCallbacks = this.callbackMap[scriptSrc];\n            delete this.callbackMap[scriptSrc];\n            for (var i = 0; i < scriptCallbacks.length; i++) {\n                scriptCallbacks[i].callback();\n            }\n        };\n        OnlyOnceScriptLoader.prototype.triggerErrorback = function (scriptSrc, err) {\n            var scriptCallbacks = this.callbackMap[scriptSrc];\n            delete this.callbackMap[scriptSrc];\n            for (var i = 0; i < scriptCallbacks.length; i++) {\n                scriptCallbacks[i].errorback(err);\n            }\n        };\n        return OnlyOnceScriptLoader;\n    }());\n    var BrowserScriptLoader = (function () {\n        function BrowserScriptLoader() {\n        }\n        /**\n         * Attach load / error listeners to a script element and remove them when either one has fired.\n         * Implemented for browssers supporting HTML5 standard 'load' and 'error' events.\n         */\n        BrowserScriptLoader.prototype.attachListeners = function (script, callback, errorback) {\n            var unbind = function () {\n                script.removeEventListener('load', loadEventListener);\n                script.removeEventListener('error', errorEventListener);\n            };\n            var loadEventListener = function (e) {\n                unbind();\n                callback();\n            };\n            var errorEventListener = function (e) {\n                unbind();\n                errorback(e);\n            };\n            script.addEventListener('load', loadEventListener);\n            script.addEventListener('error', errorEventListener);\n        };\n        BrowserScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var script = document.createElement('script');\n            script.setAttribute('async', 'async');\n            script.setAttribute('type', 'text/javascript');\n            this.attachListeners(script, callback, errorback);\n            script.setAttribute('src', scriptSrc);\n            document.getElementsByTagName('head')[0].appendChild(script);\n        };\n        return BrowserScriptLoader;\n    }());\n    var WorkerScriptLoader = (function () {\n        function WorkerScriptLoader() {\n        }\n        WorkerScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            try {\n                importScripts(scriptSrc);\n                callback();\n            }\n            catch (e) {\n                errorback(e);\n            }\n        };\n        return WorkerScriptLoader;\n    }());\n    var NodeScriptLoader = (function () {\n        function NodeScriptLoader(env) {\n            this._env = env;\n            this._didInitialize = false;\n            this._didPatchNodeRequire = false;\n        }\n        NodeScriptLoader.prototype._init = function (nodeRequire) {\n            if (this._didInitialize) {\n                return;\n            }\n            this._didInitialize = true;\n            // capture node modules\n            this._fs = nodeRequire('fs');\n            this._vm = nodeRequire('vm');\n            this._path = nodeRequire('path');\n            this._crypto = nodeRequire('crypto');\n            // js-flags have an impact on cached data\n            this._jsflags = '';\n            for (var _i = 0, _a = process.argv; _i < _a.length; _i++) {\n                var arg = _a[_i];\n                if (arg.indexOf('--js-flags=') === 0) {\n                    this._jsflags = arg;\n                    break;\n                }\n            }\n        };\n        // patch require-function of nodejs such that we can manually create a script\n        // from cached data. this is done by overriding the `Module._compile` function\n        NodeScriptLoader.prototype._initNodeRequire = function (nodeRequire, moduleManager) {\n            var nodeCachedDataDir = moduleManager.getConfig().getOptionsLiteral().nodeCachedDataDir;\n            if (!nodeCachedDataDir || this._didPatchNodeRequire) {\n                return;\n            }\n            this._didPatchNodeRequire = true;\n            var that = this;\n            var Module = nodeRequire('module');\n            function makeRequireFunction(mod) {\n                var Module = mod.constructor;\n                var require = function require(path) {\n                    try {\n                        return mod.require(path);\n                    }\n                    finally {\n                        // nothing\n                    }\n                };\n                require.resolve = function resolve(request) {\n                    return Module._resolveFilename(request, mod);\n                };\n                require.main = process.mainModule;\n                require.extensions = Module._extensions;\n                require.cache = Module._cache;\n                return require;\n            }\n            Module.prototype._compile = function (content, filename) {\n                // remove shebang\n                content = content.replace(/^#!.*/, '');\n                // create wrapper function\n                var wrapper = Module.wrap(content);\n                var cachedDataPath = that._getCachedDataPath(nodeCachedDataDir, filename);\n                var options = { filename: filename };\n                try {\n                    options.cachedData = that._fs.readFileSync(cachedDataPath);\n                }\n                catch (e) {\n                    options.produceCachedData = true;\n                }\n                var script = new that._vm.Script(wrapper, options);\n                var compileWrapper = script.runInThisContext(options);\n                var dirname = that._path.dirname(filename);\n                var require = makeRequireFunction(this);\n                var args = [this.exports, require, this, filename, dirname, process, AMDLoader.global, Buffer];\n                var result = compileWrapper.apply(this.exports, args);\n                that._processCachedData(moduleManager, script, cachedDataPath);\n                return result;\n            };\n        };\n        NodeScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var _this = this;\n            var opts = moduleManager.getConfig().getOptionsLiteral();\n            var nodeRequire = (opts.nodeRequire || AMDLoader.global.nodeRequire);\n            var nodeInstrumenter = (opts.nodeInstrumenter || function (c) { return c; });\n            this._init(nodeRequire);\n            this._initNodeRequire(nodeRequire, moduleManager);\n            var recorder = moduleManager.getRecorder();\n            if (/^node\\|/.test(scriptSrc)) {\n                var pieces = scriptSrc.split('|');\n                var moduleExports_1 = null;\n                try {\n                    moduleExports_1 = nodeRequire(pieces[1]);\n                }\n                catch (err) {\n                    errorback(err);\n                    return;\n                }\n                moduleManager.enqueueDefineAnonymousModule([], function () { return moduleExports_1; });\n                callback();\n            }\n            else {\n                scriptSrc = AMDLoader.Utilities.fileUriToFilePath(this._env.isWindows, scriptSrc);\n                this._fs.readFile(scriptSrc, { encoding: 'utf8' }, function (err, data) {\n                    if (err) {\n                        errorback(err);\n                        return;\n                    }\n                    var normalizedScriptSrc = _this._path.normalize(scriptSrc);\n                    var vmScriptSrc = normalizedScriptSrc;\n                    // Make the script src friendly towards electron\n                    if (_this._env.isElectronRenderer) {\n                        var driveLetterMatch = vmScriptSrc.match(/^([a-z])\\:(.*)/i);\n                        if (driveLetterMatch) {\n                            // windows\n                            vmScriptSrc = \"file:///\" + (driveLetterMatch[1].toUpperCase() + ':' + driveLetterMatch[2]).replace(/\\\\/g, '/');\n                        }\n                        else {\n                            // nix\n                            vmScriptSrc = \"file://\" + vmScriptSrc;\n                        }\n                    }\n                    var contents, prefix = '(function (require, define, __filename, __dirname) { ', suffix = '\\n});';\n                    if (data.charCodeAt(0) === NodeScriptLoader._BOM) {\n                        contents = prefix + data.substring(1) + suffix;\n                    }\n                    else {\n                        contents = prefix + data + suffix;\n                    }\n                    contents = nodeInstrumenter(contents, normalizedScriptSrc);\n                    if (!opts.nodeCachedDataDir) {\n                        _this._loadAndEvalScript(moduleManager, scriptSrc, vmScriptSrc, contents, { filename: vmScriptSrc }, recorder);\n                        callback();\n                    }\n                    else {\n                        var cachedDataPath_1 = _this._getCachedDataPath(opts.nodeCachedDataDir, scriptSrc);\n                        _this._fs.readFile(cachedDataPath_1, function (err, cachedData) {\n                            // create script options\n                            var options = {\n                                filename: vmScriptSrc,\n                                produceCachedData: typeof cachedData === 'undefined',\n                                cachedData: cachedData\n                            };\n                            var script = _this._loadAndEvalScript(moduleManager, scriptSrc, vmScriptSrc, contents, options, recorder);\n                            callback();\n                            _this._processCachedData(moduleManager, script, cachedDataPath_1);\n                        });\n                    }\n                });\n            }\n        };\n        NodeScriptLoader.prototype._loadAndEvalScript = function (moduleManager, scriptSrc, vmScriptSrc, contents, options, recorder) {\n            // create script, run script\n            recorder.record(AMDLoader.LoaderEventType.NodeBeginEvaluatingScript, scriptSrc);\n            var script = new this._vm.Script(contents, options);\n            var r = script.runInThisContext(options);\n            r.call(AMDLoader.global, moduleManager.getGlobalAMDRequireFunc(), moduleManager.getGlobalAMDDefineFunc(), vmScriptSrc, this._path.dirname(scriptSrc));\n            // signal done\n            recorder.record(AMDLoader.LoaderEventType.NodeEndEvaluatingScript, scriptSrc);\n            return script;\n        };\n        NodeScriptLoader.prototype._getCachedDataPath = function (basedir, filename) {\n            var hash = this._crypto.createHash('md5').update(filename, 'utf8').update(this._jsflags, 'utf8').digest('hex');\n            var basename = this._path.basename(filename).replace(/\\.js$/, '');\n            return this._path.join(basedir, basename + \"-\" + hash + \".code\");\n        };\n        NodeScriptLoader.prototype._processCachedData = function (moduleManager, script, cachedDataPath) {\n            var _this = this;\n            if (script.cachedDataRejected) {\n                // data rejected => delete cache file\n                moduleManager.getConfig().getOptionsLiteral().onNodeCachedData({\n                    errorCode: 'cachedDataRejected',\n                    path: cachedDataPath\n                });\n                NodeScriptLoader._runSoon(function () { return _this._fs.unlink(cachedDataPath, function (err) {\n                    if (err) {\n                        moduleManager.getConfig().getOptionsLiteral().onNodeCachedData({\n                            errorCode: 'unlink',\n                            path: cachedDataPath,\n                            detail: err\n                        });\n                    }\n                }); }, moduleManager.getConfig().getOptionsLiteral().nodeCachedDataWriteDelay);\n            }\n            else if (script.cachedDataProduced) {\n                // data produced => tell outside world\n                moduleManager.getConfig().getOptionsLiteral().onNodeCachedData(undefined, {\n                    path: cachedDataPath,\n                    length: script.cachedData.length\n                });\n                // data produced => write cache file\n                NodeScriptLoader._runSoon(function () { return _this._fs.writeFile(cachedDataPath, script.cachedData, function (err) {\n                    if (err) {\n                        moduleManager.getConfig().getOptionsLiteral().onNodeCachedData({\n                            errorCode: 'writeFile',\n                            path: cachedDataPath,\n                            detail: err\n                        });\n                    }\n                }); }, moduleManager.getConfig().getOptionsLiteral().nodeCachedDataWriteDelay);\n            }\n        };\n        NodeScriptLoader._runSoon = function (callback, minTimeout) {\n            var timeout = minTimeout + Math.ceil(Math.random() * minTimeout);\n            setTimeout(callback, timeout);\n        };\n        return NodeScriptLoader;\n    }());\n    NodeScriptLoader._BOM = 0xFEFF;\n    function createScriptLoader(env) {\n        return new OnlyOnceScriptLoader(env.isWebWorker ?\n            new WorkerScriptLoader()\n            : env.isNode ?\n                new NodeScriptLoader(env)\n                : new BrowserScriptLoader());\n    }\n    AMDLoader.createScriptLoader = createScriptLoader;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    // ------------------------------------------------------------------------\n    // ModuleIdResolver\n    var ModuleIdResolver = (function () {\n        function ModuleIdResolver(fromModuleId) {\n            var lastSlash = fromModuleId.lastIndexOf('/');\n            if (lastSlash !== -1) {\n                this.fromModulePath = fromModuleId.substr(0, lastSlash + 1);\n            }\n            else {\n                this.fromModulePath = '';\n            }\n        }\n        /**\n         * Normalize 'a/../name' to 'name', etc.\n         */\n        ModuleIdResolver._normalizeModuleId = function (moduleId) {\n            var r = moduleId, pattern;\n            // replace /./ => /\n            pattern = /\\/\\.\\//;\n            while (pattern.test(r)) {\n                r = r.replace(pattern, '/');\n            }\n            // replace ^./ => nothing\n            r = r.replace(/^\\.\\//g, '');\n            // replace /aa/../ => / (BUT IGNORE /../../)\n            pattern = /\\/(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//;\n            while (pattern.test(r)) {\n                r = r.replace(pattern, '/');\n            }\n            // replace ^aa/../ => nothing (BUT IGNORE ../../)\n            r = r.replace(/^(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//, '');\n            return r;\n        };\n        /**\n         * Resolve relative module ids\n         */\n        ModuleIdResolver.prototype.resolveModule = function (moduleId) {\n            var result = moduleId;\n            if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                if (AMDLoader.Utilities.startsWith(result, './') || AMDLoader.Utilities.startsWith(result, '../')) {\n                    result = ModuleIdResolver._normalizeModuleId(this.fromModulePath + result);\n                }\n            }\n            return result;\n        };\n        return ModuleIdResolver;\n    }());\n    ModuleIdResolver.ROOT = new ModuleIdResolver('');\n    AMDLoader.ModuleIdResolver = ModuleIdResolver;\n    // ------------------------------------------------------------------------\n    // Module\n    var Module = (function () {\n        function Module(id, strId, dependencies, callback, errorback, moduleIdResolver) {\n            this.id = id;\n            this.strId = strId;\n            this.dependencies = dependencies;\n            this._callback = callback;\n            this._errorback = errorback;\n            this.moduleIdResolver = moduleIdResolver;\n            this.exports = {};\n            this.exportsPassedIn = false;\n            this.unresolvedDependenciesCount = this.dependencies.length;\n            this._isComplete = false;\n        }\n        Module._safeInvokeFunction = function (callback, args) {\n            try {\n                return {\n                    returnedValue: callback.apply(AMDLoader.global, args),\n                    producedError: null\n                };\n            }\n            catch (e) {\n                return {\n                    returnedValue: null,\n                    producedError: e\n                };\n            }\n        };\n        Module._invokeFactory = function (config, strModuleId, callback, dependenciesValues) {\n            if (config.isBuild() && !AMDLoader.Utilities.isAnonymousModule(strModuleId)) {\n                return {\n                    returnedValue: null,\n                    producedError: null\n                };\n            }\n            if (config.shouldCatchError()) {\n                return this._safeInvokeFunction(callback, dependenciesValues);\n            }\n            return {\n                returnedValue: callback.apply(AMDLoader.global, dependenciesValues),\n                producedError: null\n            };\n        };\n        Module.prototype.complete = function (recorder, config, dependenciesValues) {\n            this._isComplete = true;\n            var producedError = null;\n            if (this._callback) {\n                if (typeof this._callback === 'function') {\n                    recorder.record(AMDLoader.LoaderEventType.BeginInvokeFactory, this.strId);\n                    var r = Module._invokeFactory(config, this.strId, this._callback, dependenciesValues);\n                    producedError = r.producedError;\n                    recorder.record(AMDLoader.LoaderEventType.EndInvokeFactory, this.strId);\n                    if (!producedError && typeof r.returnedValue !== 'undefined' && (!this.exportsPassedIn || AMDLoader.Utilities.isEmpty(this.exports))) {\n                        this.exports = r.returnedValue;\n                    }\n                }\n                else {\n                    this.exports = this._callback;\n                }\n            }\n            if (producedError) {\n                config.onError({\n                    errorCode: 'factory',\n                    moduleId: this.strId,\n                    detail: producedError\n                });\n            }\n            this.dependencies = null;\n            this._callback = null;\n            this._errorback = null;\n            this.moduleIdResolver = null;\n        };\n        /**\n         * One of the direct dependencies or a transitive dependency has failed to load.\n         */\n        Module.prototype.onDependencyError = function (err) {\n            if (this._errorback) {\n                this._errorback(err);\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Is the current module complete?\n         */\n        Module.prototype.isComplete = function () {\n            return this._isComplete;\n        };\n        return Module;\n    }());\n    AMDLoader.Module = Module;\n    var ModuleIdProvider = (function () {\n        function ModuleIdProvider() {\n            this._nextId = 0;\n            this._strModuleIdToIntModuleId = new Map();\n            this._intModuleIdToStrModuleId = [];\n            // Ensure values 0, 1, 2 are assigned accordingly with ModuleId\n            this.getModuleId('exports');\n            this.getModuleId('module');\n            this.getModuleId('require');\n        }\n        ModuleIdProvider.prototype.getMaxModuleId = function () {\n            return this._nextId;\n        };\n        ModuleIdProvider.prototype.getModuleId = function (strModuleId) {\n            var id = this._strModuleIdToIntModuleId.get(strModuleId);\n            if (typeof id === 'undefined') {\n                id = this._nextId++;\n                this._strModuleIdToIntModuleId.set(strModuleId, id);\n                this._intModuleIdToStrModuleId[id] = strModuleId;\n            }\n            return id;\n        };\n        ModuleIdProvider.prototype.getStrModuleId = function (moduleId) {\n            return this._intModuleIdToStrModuleId[moduleId];\n        };\n        return ModuleIdProvider;\n    }());\n    var RegularDependency = (function () {\n        function RegularDependency(id) {\n            this.id = id;\n        }\n        return RegularDependency;\n    }());\n    RegularDependency.EXPORTS = new RegularDependency(0 /* EXPORTS */);\n    RegularDependency.MODULE = new RegularDependency(1 /* MODULE */);\n    RegularDependency.REQUIRE = new RegularDependency(2 /* REQUIRE */);\n    AMDLoader.RegularDependency = RegularDependency;\n    var PluginDependency = (function () {\n        function PluginDependency(id, pluginId, pluginParam) {\n            this.id = id;\n            this.pluginId = pluginId;\n            this.pluginParam = pluginParam;\n        }\n        return PluginDependency;\n    }());\n    AMDLoader.PluginDependency = PluginDependency;\n    var ModuleManager = (function () {\n        function ModuleManager(env, scriptLoader, defineFunc, requireFunc, loaderAvailableTimestamp) {\n            if (loaderAvailableTimestamp === void 0) { loaderAvailableTimestamp = 0; }\n            this._env = env;\n            this._scriptLoader = scriptLoader;\n            this._loaderAvailableTimestamp = loaderAvailableTimestamp;\n            this._defineFunc = defineFunc;\n            this._requireFunc = requireFunc;\n            this._moduleIdProvider = new ModuleIdProvider();\n            this._config = new AMDLoader.Configuration(this._env);\n            this._modules2 = [];\n            this._knownModules2 = [];\n            this._inverseDependencies2 = [];\n            this._inversePluginDependencies2 = new Map();\n            this._currentAnnonymousDefineCall = null;\n            this._recorder = null;\n            this._buildInfoPath = [];\n            this._buildInfoDefineStack = [];\n            this._buildInfoDependencies = [];\n        }\n        ModuleManager.prototype.reset = function () {\n            return new ModuleManager(this._env, this._scriptLoader, this._defineFunc, this._requireFunc, this._loaderAvailableTimestamp);\n        };\n        ModuleManager.prototype.getGlobalAMDDefineFunc = function () {\n            return this._defineFunc;\n        };\n        ModuleManager.prototype.getGlobalAMDRequireFunc = function () {\n            return this._requireFunc;\n        };\n        ModuleManager._findRelevantLocationInStack = function (needle, stack) {\n            var normalize = function (str) { return str.replace(/\\\\/g, '/'); };\n            var normalizedPath = normalize(needle);\n            var stackPieces = stack.split(/\\n/);\n            for (var i = 0; i < stackPieces.length; i++) {\n                var m = stackPieces[i].match(/(.*):(\\d+):(\\d+)\\)?$/);\n                if (m) {\n                    var stackPath = m[1];\n                    var stackLine = m[2];\n                    var stackColumn = m[3];\n                    var trimPathOffset = Math.max(stackPath.lastIndexOf(' ') + 1, stackPath.lastIndexOf('(') + 1);\n                    stackPath = stackPath.substr(trimPathOffset);\n                    stackPath = normalize(stackPath);\n                    if (stackPath === normalizedPath) {\n                        var r = {\n                            line: parseInt(stackLine, 10),\n                            col: parseInt(stackColumn, 10)\n                        };\n                        if (r.line === 1) {\n                            r.col -= '(function (require, define, __filename, __dirname) { '.length;\n                        }\n                        return r;\n                    }\n                }\n            }\n            throw new Error('Could not correlate define call site for needle ' + needle);\n        };\n        ModuleManager.prototype.getBuildInfo = function () {\n            if (!this._config.isBuild()) {\n                return null;\n            }\n            var result = [], resultLen = 0;\n            for (var i = 0, len = this._modules2.length; i < len; i++) {\n                var m = this._modules2[i];\n                if (!m) {\n                    continue;\n                }\n                var location_1 = this._buildInfoPath[m.id] || null;\n                var defineStack = this._buildInfoDefineStack[m.id] || null;\n                var dependencies = this._buildInfoDependencies[m.id];\n                result[resultLen++] = {\n                    id: m.strId,\n                    path: location_1,\n                    defineLocation: (location_1 && defineStack ? ModuleManager._findRelevantLocationInStack(location_1, defineStack) : null),\n                    dependencies: dependencies,\n                    shim: null,\n                    exports: m.exports\n                };\n            }\n            return result;\n        };\n        ModuleManager.prototype.getRecorder = function () {\n            if (!this._recorder) {\n                if (this._config.shouldRecordStats()) {\n                    this._recorder = new AMDLoader.LoaderEventRecorder(this._loaderAvailableTimestamp);\n                }\n                else {\n                    this._recorder = AMDLoader.NullLoaderEventRecorder.INSTANCE;\n                }\n            }\n            return this._recorder;\n        };\n        ModuleManager.prototype.getLoaderEvents = function () {\n            return this.getRecorder().getEvents();\n        };\n        /**\n         * Defines an anonymous module (without an id). Its name will be resolved as we receive a callback from the scriptLoader.\n         * @param dependecies @see defineModule\n         * @param callback @see defineModule\n         */\n        ModuleManager.prototype.enqueueDefineAnonymousModule = function (dependencies, callback) {\n            if (this._currentAnnonymousDefineCall !== null) {\n                throw new Error('Can only have one anonymous define call per script file');\n            }\n            var stack = null;\n            if (this._config.isBuild()) {\n                stack = new Error('StackLocation').stack;\n            }\n            this._currentAnnonymousDefineCall = {\n                stack: stack,\n                dependencies: dependencies,\n                callback: callback\n            };\n        };\n        /**\n         * Creates a module and stores it in _modules. The manager will immediately begin resolving its dependencies.\n         * @param strModuleId An unique and absolute id of the module. This must not collide with another module's id\n         * @param dependencies An array with the dependencies of the module. Special keys are: \"require\", \"exports\" and \"module\"\n         * @param callback if callback is a function, it will be called with the resolved dependencies. if callback is an object, it will be considered as the exports of the module.\n         */\n        ModuleManager.prototype.defineModule = function (strModuleId, dependencies, callback, errorback, stack, moduleIdResolver) {\n            var _this = this;\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(strModuleId); }\n            var moduleId = this._moduleIdProvider.getModuleId(strModuleId);\n            if (this._modules2[moduleId]) {\n                if (!this._config.isDuplicateMessageIgnoredFor(strModuleId)) {\n                    console.warn('Duplicate definition of module \\'' + strModuleId + '\\'');\n                }\n                // Super important! Completely ignore duplicate module definition\n                return;\n            }\n            var m = new Module(moduleId, strModuleId, this._normalizeDependencies(dependencies, moduleIdResolver), callback, errorback, moduleIdResolver);\n            this._modules2[moduleId] = m;\n            if (this._config.isBuild()) {\n                this._buildInfoDefineStack[moduleId] = stack;\n                this._buildInfoDependencies[moduleId] = m.dependencies.map(function (dep) { return _this._moduleIdProvider.getStrModuleId(dep.id); });\n            }\n            // Resolving of dependencies is immediate (not in a timeout). If there's a need to support a packer that concatenates in an\n            // unordered manner, in order to finish processing the file, execute the following method in a timeout\n            this._resolve(m);\n        };\n        ModuleManager.prototype._normalizeDependency = function (dependency, moduleIdResolver) {\n            if (dependency === 'exports') {\n                return RegularDependency.EXPORTS;\n            }\n            if (dependency === 'module') {\n                return RegularDependency.MODULE;\n            }\n            if (dependency === 'require') {\n                return RegularDependency.REQUIRE;\n            }\n            // Normalize dependency and then request it from the manager\n            var bangIndex = dependency.indexOf('!');\n            if (bangIndex >= 0) {\n                var strPluginId = moduleIdResolver.resolveModule(dependency.substr(0, bangIndex));\n                var pluginParam = moduleIdResolver.resolveModule(dependency.substr(bangIndex + 1));\n                var dependencyId = this._moduleIdProvider.getModuleId(strPluginId + '!' + pluginParam);\n                var pluginId = this._moduleIdProvider.getModuleId(strPluginId);\n                return new PluginDependency(dependencyId, pluginId, pluginParam);\n            }\n            return new RegularDependency(this._moduleIdProvider.getModuleId(moduleIdResolver.resolveModule(dependency)));\n        };\n        ModuleManager.prototype._normalizeDependencies = function (dependencies, moduleIdResolver) {\n            var result = [], resultLen = 0;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                result[resultLen++] = this._normalizeDependency(dependencies[i], moduleIdResolver);\n            }\n            return result;\n        };\n        ModuleManager.prototype._relativeRequire = function (moduleIdResolver, dependencies, callback, errorback) {\n            if (typeof dependencies === 'string') {\n                return this.synchronousRequire(dependencies, moduleIdResolver);\n            }\n            this.defineModule(AMDLoader.Utilities.generateAnonymousModule(), dependencies, callback, errorback, null, moduleIdResolver);\n        };\n        /**\n         * Require synchronously a module by its absolute id. If the module is not loaded, an exception will be thrown.\n         * @param id The unique and absolute id of the required module\n         * @return The exports of module 'id'\n         */\n        ModuleManager.prototype.synchronousRequire = function (_strModuleId, moduleIdResolver) {\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(_strModuleId); }\n            var dependency = this._normalizeDependency(_strModuleId, moduleIdResolver);\n            var m = this._modules2[dependency.id];\n            if (!m) {\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + _strModuleId + '\\'. This is the first mention of this module!');\n            }\n            if (!m.isComplete()) {\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + _strModuleId + '\\'. This module has not been resolved completely yet.');\n            }\n            return m.exports;\n        };\n        ModuleManager.prototype.configure = function (params, shouldOverwrite) {\n            var oldShouldRecordStats = this._config.shouldRecordStats();\n            if (shouldOverwrite) {\n                this._config = new AMDLoader.Configuration(this._env, params);\n            }\n            else {\n                this._config = this._config.cloneAndMerge(params);\n            }\n            if (this._config.shouldRecordStats() && !oldShouldRecordStats) {\n                this._recorder = null;\n            }\n        };\n        ModuleManager.prototype.getConfig = function () {\n            return this._config;\n        };\n        /**\n         * Callback from the scriptLoader when a module has been loaded.\n         * This means its code is available and has been executed.\n         */\n        ModuleManager.prototype._onLoad = function (moduleId) {\n            if (this._currentAnnonymousDefineCall !== null) {\n                var defineCall = this._currentAnnonymousDefineCall;\n                this._currentAnnonymousDefineCall = null;\n                // Hit an anonymous define call\n                this.defineModule(this._moduleIdProvider.getStrModuleId(moduleId), defineCall.dependencies, defineCall.callback, null, defineCall.stack);\n            }\n        };\n        ModuleManager.prototype._createLoadError = function (moduleId, err) {\n            var _this = this;\n            var strModuleId = this._moduleIdProvider.getStrModuleId(moduleId);\n            var neededBy = (this._inverseDependencies2[moduleId] || []).map(function (intModuleId) { return _this._moduleIdProvider.getStrModuleId(intModuleId); });\n            return {\n                errorCode: 'load',\n                moduleId: strModuleId,\n                neededBy: neededBy,\n                detail: err\n            };\n        };\n        /**\n         * Callback from the scriptLoader when a module hasn't been loaded.\n         * This means that the script was not found (e.g. 404) or there was an error in the script.\n         */\n        ModuleManager.prototype._onLoadError = function (moduleId, err) {\n            var error = this._createLoadError(moduleId, err);\n            // Find any 'local' error handlers, walk the entire chain of inverse dependencies if necessary.\n            var seenModuleId = [];\n            for (var i = 0, len = this._moduleIdProvider.getMaxModuleId(); i < len; i++) {\n                seenModuleId[i] = false;\n            }\n            var someoneNotified = false;\n            var queue = [];\n            queue.push(moduleId);\n            seenModuleId[moduleId] = true;\n            while (queue.length > 0) {\n                var queueElement = queue.shift();\n                var m = this._modules2[queueElement];\n                if (m) {\n                    someoneNotified = m.onDependencyError(error) || someoneNotified;\n                }\n                var inverseDeps = this._inverseDependencies2[queueElement];\n                if (inverseDeps) {\n                    for (var i = 0, len = inverseDeps.length; i < len; i++) {\n                        var inverseDep = inverseDeps[i];\n                        if (!seenModuleId[inverseDep]) {\n                            queue.push(inverseDep);\n                            seenModuleId[inverseDep] = true;\n                        }\n                    }\n                }\n            }\n            if (!someoneNotified) {\n                this._config.onError(error);\n            }\n        };\n        /**\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\n         * Returns true if there is such a path or false otherwise.\n         * @param from Module id to start at\n         * @param to Module id to look for\n         */\n        ModuleManager.prototype._hasDependencyPath = function (fromId, toId) {\n            var from = this._modules2[fromId];\n            if (!from) {\n                return false;\n            }\n            var inQueue = [];\n            for (var i = 0, len = this._moduleIdProvider.getMaxModuleId(); i < len; i++) {\n                inQueue[i] = false;\n            }\n            var queue = [];\n            // Insert 'from' in queue\n            queue.push(from);\n            inQueue[fromId] = true;\n            while (queue.length > 0) {\n                // Pop first inserted element of queue\n                var element = queue.shift();\n                var dependencies = element.dependencies;\n                if (dependencies) {\n                    // Walk the element's dependencies\n                    for (var i = 0, len = dependencies.length; i < len; i++) {\n                        var dependency = dependencies[i];\n                        if (dependency.id === toId) {\n                            // There is a path to 'to'\n                            return true;\n                        }\n                        var dependencyModule = this._modules2[dependency.id];\n                        if (dependencyModule && !inQueue[dependency.id]) {\n                            // Insert 'dependency' in queue\n                            inQueue[dependency.id] = true;\n                            queue.push(dependencyModule);\n                        }\n                    }\n                }\n            }\n            // There is no path to 'to'\n            return false;\n        };\n        /**\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\n         * Returns cycle as array.\n         * @param from Module id to start at\n         * @param to Module id to look for\n         */\n        ModuleManager.prototype._findCyclePath = function (fromId, toId, depth) {\n            if (fromId === toId || depth === 50) {\n                return [fromId];\n            }\n            var from = this._modules2[fromId];\n            if (!from) {\n                return null;\n            }\n            // Walk the element's dependencies\n            var dependencies = from.dependencies;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                var path = this._findCyclePath(dependencies[i].id, toId, depth + 1);\n                if (path !== null) {\n                    path.push(fromId);\n                    return path;\n                }\n            }\n            return null;\n        };\n        /**\n         * Create the local 'require' that is passed into modules\n         */\n        ModuleManager.prototype._createRequire = function (moduleIdResolver) {\n            var _this = this;\n            var result = (function (dependencies, callback, errorback) {\n                return _this._relativeRequire(moduleIdResolver, dependencies, callback, errorback);\n            });\n            result.toUrl = function (id) {\n                return _this._config.requireToUrl(moduleIdResolver.resolveModule(id));\n            };\n            result.getStats = function () {\n                return _this.getLoaderEvents();\n            };\n            result.__$__nodeRequire = AMDLoader.global.nodeRequire;\n            return result;\n        };\n        ModuleManager.prototype._loadModule = function (moduleId) {\n            var _this = this;\n            if (this._modules2[moduleId] || this._knownModules2[moduleId]) {\n                // known module\n                return;\n            }\n            this._knownModules2[moduleId] = true;\n            var strModuleId = this._moduleIdProvider.getStrModuleId(moduleId);\n            var paths = this._config.moduleIdToPaths(strModuleId);\n            if (this._env.isNode && strModuleId.indexOf('/') === -1) {\n                paths.push('node|' + strModuleId);\n            }\n            var lastPathIndex = -1;\n            var loadNextPath = function (err) {\n                lastPathIndex++;\n                if (lastPathIndex >= paths.length) {\n                    // No more paths to try\n                    _this._onLoadError(moduleId, err);\n                }\n                else {\n                    var currentPath_1 = paths[lastPathIndex];\n                    var recorder_1 = _this.getRecorder();\n                    if (_this._config.isBuild() && currentPath_1 === 'empty:') {\n                        _this._buildInfoPath[moduleId] = currentPath_1;\n                        _this.defineModule(_this._moduleIdProvider.getStrModuleId(moduleId), [], null, null, null);\n                        _this._onLoad(moduleId);\n                        return;\n                    }\n                    recorder_1.record(AMDLoader.LoaderEventType.BeginLoadingScript, currentPath_1);\n                    _this._scriptLoader.load(_this, currentPath_1, function () {\n                        if (_this._config.isBuild()) {\n                            _this._buildInfoPath[moduleId] = currentPath_1;\n                        }\n                        recorder_1.record(AMDLoader.LoaderEventType.EndLoadingScriptOK, currentPath_1);\n                        _this._onLoad(moduleId);\n                    }, function (err) {\n                        recorder_1.record(AMDLoader.LoaderEventType.EndLoadingScriptError, currentPath_1);\n                        loadNextPath(err);\n                    });\n                }\n            };\n            loadNextPath(null);\n        };\n        /**\n         * Resolve a plugin dependency with the plugin loaded & complete\n         * @param module The module that has this dependency\n         * @param pluginDependency The semi-normalized dependency that appears in the module. e.g. 'vs/css!./mycssfile'. Only the plugin part (before !) is normalized\n         * @param plugin The plugin (what the plugin exports)\n         */\n        ModuleManager.prototype._loadPluginDependency = function (plugin, pluginDependency) {\n            var _this = this;\n            if (this._modules2[pluginDependency.id] || this._knownModules2[pluginDependency.id]) {\n                // known module\n                return;\n            }\n            this._knownModules2[pluginDependency.id] = true;\n            // Delegate the loading of the resource to the plugin\n            var load = (function (value) {\n                _this.defineModule(_this._moduleIdProvider.getStrModuleId(pluginDependency.id), [], value, null, null);\n            });\n            load.error = function (err) {\n                _this._config.onError(_this._createLoadError(pluginDependency.id, err));\n            };\n            plugin.load(pluginDependency.pluginParam, this._createRequire(ModuleIdResolver.ROOT), load, this._config.getOptionsLiteral());\n        };\n        /**\n         * Examine the dependencies of module 'module' and resolve them as needed.\n         */\n        ModuleManager.prototype._resolve = function (module) {\n            var _this = this;\n            var dependencies = module.dependencies;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                var dependency = dependencies[i];\n                if (dependency === RegularDependency.EXPORTS) {\n                    module.exportsPassedIn = true;\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                if (dependency === RegularDependency.MODULE) {\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                if (dependency === RegularDependency.REQUIRE) {\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                var dependencyModule = this._modules2[dependency.id];\n                if (dependencyModule && dependencyModule.isComplete()) {\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                if (this._hasDependencyPath(dependency.id, module.id)) {\n                    console.warn('There is a dependency cycle between \\'' + this._moduleIdProvider.getStrModuleId(dependency.id) + '\\' and \\'' + this._moduleIdProvider.getStrModuleId(module.id) + '\\'. The cyclic path follows:');\n                    var cyclePath = this._findCyclePath(dependency.id, module.id, 0);\n                    cyclePath.reverse();\n                    cyclePath.push(dependency.id);\n                    console.warn(cyclePath.map(function (id) { return _this._moduleIdProvider.getStrModuleId(id); }).join(' => \\n'));\n                    // Break the cycle\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                // record inverse dependency\n                this._inverseDependencies2[dependency.id] = this._inverseDependencies2[dependency.id] || [];\n                this._inverseDependencies2[dependency.id].push(module.id);\n                if (dependency instanceof PluginDependency) {\n                    var plugin = this._modules2[dependency.pluginId];\n                    if (plugin && plugin.isComplete()) {\n                        this._loadPluginDependency(plugin.exports, dependency);\n                        continue;\n                    }\n                    // Record dependency for when the plugin gets loaded\n                    var inversePluginDeps = this._inversePluginDependencies2.get(dependency.pluginId);\n                    if (!inversePluginDeps) {\n                        inversePluginDeps = [];\n                        this._inversePluginDependencies2.set(dependency.pluginId, inversePluginDeps);\n                    }\n                    inversePluginDeps.push(dependency);\n                    this._loadModule(dependency.pluginId);\n                    continue;\n                }\n                this._loadModule(dependency.id);\n            }\n            if (module.unresolvedDependenciesCount === 0) {\n                this._onModuleComplete(module);\n            }\n        };\n        ModuleManager.prototype._onModuleComplete = function (module) {\n            var _this = this;\n            var recorder = this.getRecorder();\n            if (module.isComplete()) {\n                // already done\n                return;\n            }\n            var dependencies = module.dependencies;\n            var dependenciesValues = [];\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                var dependency = dependencies[i];\n                if (dependency === RegularDependency.EXPORTS) {\n                    dependenciesValues[i] = module.exports;\n                    continue;\n                }\n                if (dependency === RegularDependency.MODULE) {\n                    dependenciesValues[i] = {\n                        id: module.strId,\n                        config: function () {\n                            return _this._config.getConfigForModule(module.strId);\n                        }\n                    };\n                    continue;\n                }\n                if (dependency === RegularDependency.REQUIRE) {\n                    dependenciesValues[i] = this._createRequire(module.moduleIdResolver);\n                    continue;\n                }\n                var dependencyModule = this._modules2[dependency.id];\n                if (dependencyModule) {\n                    dependenciesValues[i] = dependencyModule.exports;\n                    continue;\n                }\n                dependenciesValues[i] = null;\n            }\n            module.complete(recorder, this._config, dependenciesValues);\n            // Fetch and clear inverse dependencies\n            var inverseDeps = this._inverseDependencies2[module.id];\n            this._inverseDependencies2[module.id] = null;\n            if (inverseDeps) {\n                // Resolve one inverse dependency at a time, always\n                // on the lookout for a completed module.\n                for (var i = 0, len = inverseDeps.length; i < len; i++) {\n                    var inverseDependencyId = inverseDeps[i];\n                    var inverseDependency = this._modules2[inverseDependencyId];\n                    inverseDependency.unresolvedDependenciesCount--;\n                    if (inverseDependency.unresolvedDependenciesCount === 0) {\n                        this._onModuleComplete(inverseDependency);\n                    }\n                }\n            }\n            var inversePluginDeps = this._inversePluginDependencies2.get(module.id);\n            if (inversePluginDeps) {\n                // This module is used as a plugin at least once\n                // Fetch and clear these inverse plugin dependencies\n                this._inversePluginDependencies2.delete(module.id);\n                // Resolve plugin dependencies one at a time\n                for (var i = 0, len = inversePluginDeps.length; i < len; i++) {\n                    this._loadPluginDependency(module.exports, inversePluginDeps[i]);\n                }\n            }\n        };\n        return ModuleManager;\n    }());\n    AMDLoader.ModuleManager = ModuleManager;\n})(AMDLoader || (AMDLoader = {}));\nvar define;\nvar AMDLoader;\n(function (AMDLoader) {\n    var moduleManager = null;\n    var DefineFunc = null;\n    var RequireFunc = null;\n    function createGlobalAMDFuncs() {\n        var _defineFunc = function (id, dependencies, callback) {\n            if (typeof id !== 'string') {\n                callback = dependencies;\n                dependencies = id;\n                id = null;\n            }\n            if (typeof dependencies !== 'object' || !Array.isArray(dependencies)) {\n                callback = dependencies;\n                dependencies = null;\n            }\n            if (!dependencies) {\n                dependencies = ['require', 'exports', 'module'];\n            }\n            if (id) {\n                moduleManager.defineModule(id, dependencies, callback, null, null);\n            }\n            else {\n                moduleManager.enqueueDefineAnonymousModule(dependencies, callback);\n            }\n        };\n        DefineFunc = _defineFunc;\n        DefineFunc.amd = {\n            jQuery: true\n        };\n        var _requireFunc_config = function (params, shouldOverwrite) {\n            if (shouldOverwrite === void 0) { shouldOverwrite = false; }\n            moduleManager.configure(params, shouldOverwrite);\n        };\n        var _requireFunc = function () {\n            if (arguments.length === 1) {\n                if ((arguments[0] instanceof Object) && !Array.isArray(arguments[0])) {\n                    _requireFunc_config(arguments[0]);\n                    return;\n                }\n                if (typeof arguments[0] === 'string') {\n                    return moduleManager.synchronousRequire(arguments[0]);\n                }\n            }\n            if (arguments.length === 2 || arguments.length === 3) {\n                if (Array.isArray(arguments[0])) {\n                    moduleManager.defineModule(AMDLoader.Utilities.generateAnonymousModule(), arguments[0], arguments[1], arguments[2], null);\n                    return;\n                }\n            }\n            throw new Error('Unrecognized require call');\n        };\n        RequireFunc = _requireFunc;\n        RequireFunc.config = _requireFunc_config;\n        RequireFunc.getConfig = function () {\n            return moduleManager.getConfig().getOptionsLiteral();\n        };\n        RequireFunc.reset = function () {\n            moduleManager = moduleManager.reset();\n        };\n        RequireFunc.getBuildInfo = function () {\n            return moduleManager.getBuildInfo();\n        };\n        RequireFunc.getStats = function () {\n            return moduleManager.getLoaderEvents();\n        };\n    }\n    function init() {\n        createGlobalAMDFuncs();\n        var env = AMDLoader.Environment.detect();\n        var scriptLoader = AMDLoader.createScriptLoader(env);\n        moduleManager = new AMDLoader.ModuleManager(env, scriptLoader, DefineFunc, RequireFunc, AMDLoader.Utilities.getHighPerformanceTimestamp());\n        if (env.isNode) {\n            var _nodeRequire = (AMDLoader.global.require || require);\n            var nodeRequire = function (what) {\n                moduleManager.getRecorder().record(AMDLoader.LoaderEventType.NodeBeginNativeRequire, what);\n                try {\n                    return _nodeRequire(what);\n                }\n                finally {\n                    moduleManager.getRecorder().record(AMDLoader.LoaderEventType.NodeEndNativeRequire, what);\n                }\n            };\n            AMDLoader.global.nodeRequire = nodeRequire;\n            RequireFunc.nodeRequire = nodeRequire;\n        }\n        if (env.isNode && !env.isElectronRenderer) {\n            module.exports = RequireFunc;\n            // These two defs are fore the local closure defined in node in the case that the loader is concatenated\n            define = function () {\n                DefineFunc.apply(null, arguments);\n            };\n            require = RequireFunc;\n        }\n        else {\n            // The global variable require can configure the loader\n            if (typeof AMDLoader.global.require !== 'undefined' && typeof AMDLoader.global.require !== 'function') {\n                RequireFunc.config(AMDLoader.global.require);\n            }\n            if (!env.isElectronRenderer) {\n                AMDLoader.global.define = define = DefineFunc;\n            }\n            else {\n                define = function () {\n                    DefineFunc.apply(null, arguments);\n                };\n            }\n            AMDLoader.global.require = RequireFunc;\n            AMDLoader.global.require.__$__nodeRequire = nodeRequire;\n        }\n    }\n    AMDLoader.init = init;\n    if (typeof doNotInitLoader === 'undefined' &&\n        (typeof AMDLoader.global.define !== 'function' || !AMDLoader.global.define.amd)) {\n        init();\n    }\n})(AMDLoader || (AMDLoader = {}));\n"]}